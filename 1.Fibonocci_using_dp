//Fibonocii using Memoization
#include<bits/stdc++.h>
using namespace std;
int Fun(int n,vector<int> &dp){
    if(n<=1){
        return n;
    }
    if(dp[n]!=-1) return dp[n];
    dp[n]=Fun(n-1,dp)+Fun(n-2,dp);
    return dp[n];
}

int main(){
    int n;
    cin>>n;
    vector<int> dp(n+1,-1);
    cout<<Fun(n,dp);
}

//Tabulation method
#include<bits/stdc++.h>
using namespace std;
int Fun(int n){
    if(n==0 || n==1){ return n;}
    vector<int> dp(n+1);
    dp[0]=0;
    dp[1]=1;
    for(int i=2;i<=n;i++){
    dp[i]=dp[i-1]+dp[i-2];
    }
    return dp[n];
}

int main(){
    int n;
    cin>>n;
    cout<<Fun(n);
}



//Space optimaztion

#include <bits/stdc++.h>
using namespace std;

int Fun(int n) {
    if (n == 0) return 0;
    if (n == 1) return 1;

    int prev2 = 0;  
    int prev1 = 1;  
    int curr;

    for (int i = 2; i <= n; i++) {
        curr = prev1 + prev2;
        prev2 = prev1;
        prev1 = curr;
    }

    return curr;
}

int main() {
    int n;
    cin >> n;
    cout << Fun(n);
    return 0;
}
